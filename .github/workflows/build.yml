name: Picasso V2

on:
  workflow_call:
    inputs:
      STRAIN_REPOSITORY:
        description: 'The repository for strains to checkout. It should follow the format: ORGANIZATION/REPO'
        required: true
        type: string
      STRAIN_REPOSITORY_BRANCH:
        description: 'The branch of the repository to checkout'
        required: true
        type: string
      STRAIN_PATH:
        description: 'The path within the repository for strains'
        required: true
        type: string
      SERVICE:
        description: 'The service name to build'
        required: true
        type: string
      ENABLE_LIMIT_BUILDKIT_PARALLELISM:
        description: 'Enable buildkit parallelism limit to decrease resource usage. Default is true'
        required: false
        type: boolean
        default: true
    secrets:
      DOCKERHUB_USERNAME:
        description: 'DockerHub username for login'
        required: false
      DOCKERHUB_PASSWORD:
        description: 'DockerHub password for login'
        required: false
      SSH_PRIVATE_KEY:
        description: 'Service user SSH key for repository checkout'
        required: true
      AWS_ACCESS_KEY_ID:
        description: 'AWS access key ID'
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS secret access key'
        required: false
      AWS_REGION:
        description: 'AWS region'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout strains repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.STRAIN_REPOSITORY }}
          ref: ${{ inputs.STRAIN_REPOSITORY_BRANCH }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install necessary dependencies
        run: |
          pip install pyyaml
          pip install git+https://github.com/eduNEXT/tvm.git

      - name: Get Tutor configuration values and set them as environment variables
        shell: python
        working-directory: ${{ inputs.STRAIN_PATH }}
        run: |
          import os
          import sys
          import yaml

          file_path = os.path.join(os.getcwd(), "config.yml")
          if not os.path.exists(file_path):
            print("ERROR: file config.yml doesn't exist")
            sys.exit(1)

          with open(file_path, "r", encoding="utf-8") as file:
            tutor_config = yaml.safe_load(file)

          required_keys = ["TUTOR_VERSION", "TUTOR_APP_NAME"]
          optional_keys = ["DOCKER_REGISTRY"]
          env_vars = []

          for key in required_keys:
            if key not in tutor_config:
              print(f"ERROR: key {key} not found in config.yml")
              sys.exit(1)
            env_vars.append(f"{key}={tutor_config[key]}")

          for key in optional_keys:
            if key in tutor_config:
              env_vars.append(f"{key}={tutor_config[key]}")

          with open(os.environ["GITHUB_ENV"], "a") as file:
            file.write("\n".join(env_vars))

      - name: Configure TVM project
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}
        run: |
          tvm install $TUTOR_VERSION
          tvm project init $TUTOR_APP_NAME $TUTOR_VERSION

          # This command copies all the files and folders
          # from the repository STRAIN_PATH to the recently above created TVM PROJECT folder
          cp -r $(ls --ignore=$TUTOR_APP_NAME) $TUTOR_APP_NAME/

      - name: Enable and install picasso plugin in Tutor environment
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}/${{ env.TUTOR_APP_NAME }}
        run: |
          . .tvm/bin/activate

          pip install git+https://github.com/eduNEXT/tutor-contrib-picasso@v0.1.1
          tutor plugins enable picasso

      - name: Setup SSH agent for private repositories cloning
        uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add GitHub to known hosts
        shell: bash
        run: |
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Execute extra commands
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}/${{ env.TUTOR_APP_NAME }}
        run: |
          . .tvm/bin/activate
          tutor picasso run-extra-commands

      - name: Limit build parallelism to decrease resource usage
        if: ${{ inputs.ENABLE_LIMIT_BUILDKIT_PARALLELISM }}
        shell: bash
        run: |
          echo "[worker.oci]
          max-parallelism = 3" > buildkit.toml
          docker buildx create --use --node=limitparallelsteps --driver=docker-container --config=./buildkit.toml

      - name: Configure AWS credentials
        if: ${{ contains(env.DOCKER_REGISTRY, 'aws') }}
        uses: aws-actions/configure-aws-credentials@v4
        id: login-ecr
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR if Docker registry is AWS
        if: ${{ contains(env.DOCKER_REGISTRY, 'aws') }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to DockerHub if Docker registry is DockerHub or not set
        if: ${{ env.DOCKER_REGISTRY == null || contains(env.DOCKER_REGISTRY, 'docker.io') }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build service image with no cache
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}/${{ env.TUTOR_APP_NAME }}
        env:
          SERVICE: ${{ inputs.SERVICE }}
        run: |
          . .tvm/bin/activate
          tutor config save
          tutor images build $SERVICE --no-cache

      - name: Push service image to registry
        working-directory: ${{ inputs.STRAIN_PATH }}/${{ env.TUTOR_APP_NAME }}
        env:
          SERVICE: ${{ inputs.SERVICE }}
        run: |
          . .tvm/bin/activate
          tutor images push $SERVICE
