name: Picasso V2

on:
  workflow_call:
    inputs:
      STRAIN_REPOSITORY:
        description: 'The repository for strains to checkout. It should follow the format: ORGANIZATION/REPO'
        required: true
        type: string
      STRAIN_REPOSITORY_BRANCH:
        description: 'The branch of the repository to checkout'
        required: true
        type: string
      STRAIN_PATH:
        description: 'The path within the repository for strains'
        required: true
        type: string
      SERVICE:
        description: 'The service name to build'
        required: true
        type: string
      BUILDKIT_MAX_PARALLELISM:
        description: 'Enable buildkit parallelism limit to decrease resource usage. Default is true'
        required: false
        type: number
        default: 0
      RUNNER_WORKFLOW_LABEL:
        description: 'The label of the runner workflow to run'
        required: false
        type: string
        default: 'ubuntu-24.04'
      PYTHON_VERSION:
        description: 'Python version to use for the workflow'
        required: false
        type: string
        default: '3.12'
      PICASSO_VERSION:
        description: 'Picasso version to use for the workflow scripts and utility functions. This should be a valid branch, tag or commit and it should match the version of the workflow used.'
        required: false
        type: string
        default: 'v1'
      USE_DYNAMIC_IMAGE_TAG:
        description: 'If set to true, the image tag defined in config.yml will be ignored, and a dynamically generated tag will be used instead.'
        required: false
        type: boolean
        default: false
      UPDATE_IMAGE_TAG_IN_REPO:
        description: 'If this field is set to true, a commit will be created with the updated image tag name in the config.yml file'
        required: false
        type: boolean
        default: false
      ADD_RANDOM_SUFFIX_TO_IMAGE_TAG:
        description: 'Appends a random four-character alphanumeric suffix to the image tag by default. If RANDOM_SUFFIX_LENGTH is defined, the length of the suffix will be determined by that setting. This option is only used if USE_DYNAMIC_IMAGE_TAG is enabled.'
        required: false
        type: boolean
        default: false
      RANDOM_SUFFIX_LENGTH:
        description: 'Specifies the number of random characters to append as a random suffix'
        required: false
        type: string
        default: "4"
      IMAGE_TAG_PREFIX:
        description: 'Prefix added to the dynamically generated image tag. Only used if USE_DYNAMIC_IMAGE_TAG is enabled.'
        required: false
        type: string
        default: ""
      TIMESTAMP_FORMAT:
        description: 'Timestamp format used in the generated image tag. Follows Pythonâ€™s strftime syntax. Only used if USE_DYNAMIC_IMAGE_TAG is enabled.'
        required: false
        type: string
        default: "%Y%m%d-%H%M"
    secrets:
      DOCKERHUB_USERNAME:
        description: 'DockerHub username for login'
        required: false
      DOCKERHUB_PASSWORD:
        description: 'DockerHub password for login'
        required: false
      SSH_PRIVATE_KEY:
        description: 'Service user SSH key for repository checkout'
        required: true
      AWS_ACCESS_KEY_ID:
        description: 'AWS access key ID'
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS secret access key'
        required: false
      AWS_REGION:
        description: 'AWS region'
        required: false

jobs:
  build:
    runs-on: ${{ inputs.RUNNER_WORKFLOW_LABEL }}
    defaults:
      run:
        shell: bash
        working-directory: strains/${{ inputs.STRAIN_PATH }}
    env:
      TUTOR_ROOT: ${{ github.workspace }}/strains/${{ inputs.STRAIN_PATH }}
      TUTOR_PLUGINS_ROOT: ${{ github.workspace }}/strains/${{ inputs.STRAIN_PATH }}/plugins

    steps:
      - name: Checkout Picasso repository for utility scripts
        uses: actions/checkout@v4
        with:
          repository: edunext/picasso
          ref: ${{ inputs.PICASSO_VERSION }}
          path: picasso

      - name: Checkout strains repository for build configurations
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.STRAIN_REPOSITORY }}
          ref: ${{ inputs.STRAIN_REPOSITORY_BRANCH }}
          ssh-key: ${{ inputs.STRAIN_REPOSITORY != github.repository && secrets.SSH_PRIVATE_KEY || '' }}
          path: strains

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Install necessary requirements for workflow scripts
        working-directory: ${{ github.workspace }}
        run: |
          pip install -r picasso/requirements/base.txt

      - name: Get Tutor Configurations from config.yml and set them as an environment variable
        working-directory: ${{ github.workspace }}
        env:
          REQUIRED_KEYS: TUTOR_VERSION
          OPTIONAL_KEYS: DOCKER_REGISTRY
          CONFIG_FILE: strains/${{ inputs.STRAIN_PATH }}/config.yml
          SCRIPT_PATH: picasso/.github/workflows/scripts/get_tutor_config.py
        run: |
          ENV_VARS=$(python $SCRIPT_PATH --config-file $CONFIG_FILE --required-keys $REQUIRED_KEYS --optional-keys $OPTIONAL_KEYS)
          echo "$ENV_VARS" >> $GITHUB_ENV

      - name: Create a dynamic image tag name, also set key and new image name as environment variables
        if: ${{ inputs.USE_DYNAMIC_IMAGE_TAG }}
        working-directory: ${{ github.workspace }}
        env:
          CONFIG_FILE: strains/${{ inputs.STRAIN_PATH }}/config.yml
          SCRIPT_PATH: picasso/.github/workflows/scripts/dynamic_image_tag.py
          SERVICE: ${{ inputs.SERVICE }}
          IMAGE_TAG_PREFIX: ${{ inputs.IMAGE_TAG_PREFIX }}
          TIMESTAMP_FORMAT: ${{ inputs.TIMESTAMP_FORMAT }}
          ADD_RANDOM_SUFFIX_TO_IMAGE_TAG: ${{ inputs.ADD_RANDOM_SUFFIX_TO_IMAGE_TAG }}
          RANDOM_SUFFIX_LENGTH: ${{ inputs.RANDOM_SUFFIX_LENGTH }}
        run: |
          REPO_NAME="${STRAIN_REPOSITORY##*/}"
          ENV_VARS=$(python $SCRIPT_PATH \
                      --config-file "$CONFIG_FILE" \
                      --service "$SERVICE" \
                      --image-tag-prefix "$IMAGE_TAG_PREFIX" \
                      --timestamp-format "$TIMESTAMP_FORMAT" \
                      --add-random-suffix-to-image-tag "$ADD_RANDOM_SUFFIX_TO_IMAGE_TAG" \
                      --random-suffix-length "$RANDOM_SUFFIX_LENGTH")
          echo "$ENV_VARS" >> $GITHUB_ENV

      - name: Install Tutor and its dependencies from the version specified in the config.yml
        run: |
          pip install git+https://github.com/overhangio/tutor.git@$TUTOR_VERSION
          tutor config save

      - name: Update image tag in config.yml locally
        if: ${{ inputs.USE_DYNAMIC_IMAGE_TAG }}
        run: tutor config save --set $TARGET_KEY=$DYNAMIC_IMAGE_TAG

      - name: Enable and install picasso plugin in Tutor environment
        run: |
          pip install git+https://github.com/eduNEXT/tutor-contrib-picasso@v0.2.0
          tutor plugins enable picasso

      - name: Setup SSH agent for private repositories cloning
        uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add GitHub to known hosts
        run: |
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Execute extra commands
        run: |
          tutor picasso run-extra-commands

      - name: Limit build parallelism to decrease resource usage
        if: ${{ inputs.BUILDKIT_MAX_PARALLELISM }}
        run: |
          echo "[worker.oci]
          max-parallelism = ${{ inputs.BUILDKIT_MAX_PARALLELISM }}" > buildkit.toml
          docker buildx create --use --node=limitparallelsteps --driver=docker-container --config=./buildkit.toml

      - name: Configure AWS credentials
        if: ${{ contains(env.DOCKER_REGISTRY, 'aws') }}
        uses: aws-actions/configure-aws-credentials@v4
        id: login-ecr
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR if Docker registry is AWS
        if: ${{ contains(env.DOCKER_REGISTRY, 'aws') }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to DockerHub if Docker registry is DockerHub or not set
        if: ${{ env.DOCKER_REGISTRY == null || contains(env.DOCKER_REGISTRY, 'docker.io') }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build service image with no cache
        env:
          SERVICE: ${{ inputs.SERVICE }}
          LOGS_FILE_PATH: /tmp/build_logs.out
        run: |
          tutor config save
          (tutor images build $SERVICE --no-cache 2>&1) | tee $LOGS_FILE_PATH

      - name: Scan build logs for potential errors in the image
        working-directory: ${{ github.workspace }}
        env:
          SCRIPT_PATH: picasso/.github/workflows/scripts/identify_silent_errors.py
          LOGS_FILE_PATH: /tmp/build_logs.out
        run: |
          python $SCRIPT_PATH $LOGS_FILE_PATH

      - name: Push service image to registry
        env:
          SERVICE: ${{ inputs.SERVICE }}
        run: |
          tutor images push $SERVICE

      - name: Show image name for service
        if: ${{ inputs.USE_DYNAMIC_IMAGE_TAG }}
        run: tutor config printvalue $TARGET_KEY

      - name: Update image tag in remote repository
        if: ${{ inputs.USE_DYNAMIC_IMAGE_TAG && inputs.UPDATE_IMAGE_TAG_IN_REPO }}
        working-directory: ${{ github.workspace }}/strains
        env:
          CONFIG_FILE: build/config.yml
          SERVICE: ${{ inputs.SERVICE }}
          SCRIPT_PATH: ../picasso/.github/workflows/scripts/dynamic_image_tag.py
        run: |
          git config user.name "GitHub Actions" 
          git config user.email "actions@github.com"
          git restore $CONFIG_FILE
          python $SCRIPT_PATH \
            --config-file ../strains/"$CONFIG_FILE" \
            --service "$SERVICE" \
            --save-config "true" \
            --image-tag "$DYNAMIC_IMAGE_TAG"
          git add $CONFIG_FILE
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update service: ${{ inputs.SERVICE }} image"
            git push
          fi
