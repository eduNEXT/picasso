name: Picasso V2

on:
  workflow_call:
    inputs:
      STRAIN_REPOSITORY:
        description: 'The repository for strains to checkout. It should follow the format: ORGANIZATION/REPO'
        required: true
        type: string
      STRAIN_REPOSITORY_BRANCH:
        description: 'The branch of the repository to checkout'
        required: true
        type: string
      STRAIN_PATH:
        description: 'The path within the repository for strains'
        required: true
        type: string
      SERVICE:
        description: 'The service name to build'
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        description: 'DockerHub username for login'
        required: true
      DOCKERHUB_PASSWORD:
        description: 'DockerHub password for login'
        required: true
      SSH_PRIVATE_KEY:
        description: 'Service user SSH key for repository checkout'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Checkout strains repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.STRAIN_REPOSITORY }}
          ref: ${{ inputs.STRAIN_REPOSITORY_BRANCH }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup virtualenv
        shell: bash
        run: |
          python -m venv venv
          . venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Get tutor version from config.yml
        shell: python
        run: |
          import os
          import yaml

          config_path = os.path.join('${{ inputs.STRAIN_PATH }}', 'config.yml')

          if not os.path.exists(config_path):
            print("ERROR: file config.yml doesn't exist")
            exit(1)

          # Initialize variables
          strain_tutor_version = ""

          with open(config_path, 'r') as f:
            config = yaml.safe_load(f)

          if 'TUTOR_VERSION' in config:
            strain_tutor_version = config['TUTOR_VERSION'][1:]

            if not strain_tutor_version:
              print("ERROR: TUTOR_VERSION not found in the given config.yml", file=sys.stderr)
              exit(1)

            print(f"TUTOR_VERSION={strain_tutor_version}", file=open(os.environ['GITHUB_ENV'], 'a'))

      - name: Install Tutor version from config.yml
        shell: bash
        run: |
          pip install tutor==$TUTOR_VERSION

      - name: Enable picasso plugin
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}
        run: |
          pip install git+https://github.com/eduNEXT/tutor-contrib-picasso
          tutor plugins enable picasso

      - name: Setup SSH agent for private repositories cloning
        uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add GitHub to known hosts
        shell: bash
        run: |
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Execute extra commands
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}
        run: |
          tutor picasso run-extra-commands

      - name: Prepare docker if building MFE
        if: ${{ inputs.SERVICE == 'mfe' }}
        shell: bash
        run: |
          echo "[worker.oci]" > buildkit.toml
          echo "max-parallelism = 2" >> buildkit.toml
          docker buildx create --use --node=max2cpu --driver=docker-container --config=./buildkit.toml

      - name: Build service image with no cache
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}
        env:
          SERVICE: ${{ inputs.SERVICE }}
        run: |
          tutor config save
          tutor images build $SERVICE

      - name: Push service image to DockerHub
        shell: bash
        working-directory: ${{ inputs.STRAIN_PATH }}
        env:
          SERVICE: ${{ inputs.SERVICE }}
        run: |
          tutor images push $SERVICE
